// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
model Store {
  id             String       @id @default(uuid())
  name           String
  userId         String
  billboards     Billboard[]    @relation("StoreToBillboard")
  icons    Icon[]    @relation("StoreToIcon")
  categories     Category[]     @relation("StoreToCategory")
  subcategories  Subcategory[]  @relation("StoreToSubcategory")
  products       Product[]      @relation("StoreToProduct")
  comments       Comment[]      @relation("StoreToComment")
  sizes          Size[]         @relation("StoreToSize")
  color          Color[]        @relation("StoreToColor")
  orders         Order[]        @relation("StoreToOrder")
  spec       Spec[]             @relation("StoreToSpec")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Billboard {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToBillboard",fields:[storeId], references:[id])
  label     String
  imageUrl  String
  categories  Category[]
  subcategories Subcategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}
model Icon {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToIcon",fields:[storeId], references:[id])
  label     String
  imageUrl  String
  categories  Category[]
  subcategories Subcategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Category {
  id             String        @id @default(uuid())
  storeId        String        // Foreign Key to Store
  store          Store         @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId    String        // Foreign Key to Billboard
  billboard      Billboard     @relation(fields: [billboardId], references: [id])
  iconId         String      // Update the type to allow for null
  icon           Icon         @relation(fields: [iconId], references: [id])
  products       Product[]     @relation("CategoryToProduct")
  subcategories  Subcategory[] @relation("CategoryToSubcategory")
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([storeId])
  @@index([billboardId])
  @@index([iconId])
}

model Subcategory {
  id           String        @id @default(uuid())
  storeId      String        // Foreign Key to Store
  store        Store         @relation("StoreToSubcategory", fields: [storeId], references: [id])
  billboardId  String        // Foreign Key to Billboard
  billboard    Billboard     @relation(fields: [billboardId], references: [id])
  iconId       String       // Update the type to allow for null
  icon         Icon         @relation(fields: [iconId], references: [id])
  categoryId   String        // Foreign Key to Category
  category     Category      @relation("CategoryToSubcategory",fields: [categoryId], references: [id])
  products     Product[]     @relation("SubcategoryToProduct")
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([billboardId])
  @@index([iconId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subcategoryId  String    // Foreign Key to Category
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  name        String
  description String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  isOffered   Boolean   @default(false)
  isUndercost Boolean   @default(false)
  sizes ProductSizes[]
  colors ProductColors[]
  productSpec ProductSpec[]
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  comments      Comment[]   
  quantity      Int          @default(0)  // New field for quantity with a default value of 0
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  size       Size[]
  color      Color[]
  spec       Spec[] 
  @@index([storeId])
  @@index([categoryId])
  @@index([subcategoryId])

}

model Spec {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToSpec", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productSpec ProductSpec[]

  @@index([storeId])

}
model ProductSpec {

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  spec Spec @relation(fields: [specId], references: [id])
  specId String
  @@id([productId, specId])
  @@index([productId])
  @@index([specId])
}

model ProductSizes {

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  size Size @relation(fields: [sizeId], references: [id])
  sizeId String
  @@id([productId, sizeId])
  @@index([productId])
  @@index([sizeId])
}

model ProductColors {
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  color Color @relation(fields: [colorId], references: [id])
  colorId String
  @@id([productId, colorId])
  @@index([productId])
  @@index([colorId])
}
model Order {
  id         String    @id @default(uuid())
  storeId    String    // Foreign Key to Store
  store      Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  userId      String?      // Foreign Key to User
  user        User?     @relation(fields: [userId], references: [externalId])
  tracking    String @default("")
  status    String @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([userId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])
  metadata Json ///ADDED
  color String  ///ADDED
  size String   ///ADDED
  @@index([orderId])
  @@index([productId])
}
model Size {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productSizes ProductSizes[]

  @@index([storeId])
}
model Color {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  productsColors    ProductColors[] 
  products    Product[] 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}
model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToComment", fields: [storeId], references: [id])
  userId      String      // Foreign Key to User
  user        User        @relation(fields: [userId], references: [externalId])
  productId   String      // Foreign Key to Product
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  rate        Decimal
  message     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([userId])
  @@index([productId])
}

model User {
  id          Int       @id @default(autoincrement())
  externalId  String    @unique
  attributes  Json
  comments    Comment[]
  orderItem   Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
